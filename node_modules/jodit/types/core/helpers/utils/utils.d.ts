/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { CanPromise, IControlType, IDictionary, IViewBased, IJodit, RejectablePromise, Nullable } from 'jodit/types';
export declare function call<T extends any[], R>(func: (...args: T) => R, ...args: T): R;
export declare function attr(elm: Element, key: string): null | string;
export declare function attr(elm: Element, key: string, value: null): void;
export declare function attr(elm: Element, key: string, value: string | number | boolean | undefined | null): null;
export declare function attr(elm: Element, attributes: IDictionary<string | number | boolean | null>): null;
export declare function markOwner(jodit: IViewBased, elm: HTMLElement): void;
export declare function callPromise(condition: CanPromise<unknown>, callback: () => CanPromise<any>): CanPromise<void>;
export declare const loadImage: (src: string, jodit: IViewBased) => RejectablePromise<HTMLImageElement>;
export declare const keys: (obj: object, own?: boolean) => string[];
export declare const memorizeExec: <T extends IJodit = IJodit>(editor: T, _: unknown, { control }: {
    control: IControlType<T, import("jodit/types").IToolbarButton>;
}, preProcessValue?: ((value: string) => string) | undefined) => void | false;
export declare const getDataTransfer: (event: ClipboardEvent | DragEvent) => Nullable<DataTransfer>;
