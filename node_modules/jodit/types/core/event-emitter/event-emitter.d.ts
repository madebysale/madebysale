/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { CallbackFunction, CanArray, IEventEmitter, IEventEmitterOnOptions } from 'jodit/types';
export declare class EventEmitter implements IEventEmitter {
    private __mutedEvents;
    mute(event?: string): this;
    isMuted(event?: string): boolean;
    unmute(event?: string): this;
    readonly __key: string;
    private __doc;
    private __eachEvent;
    private __getStore;
    private __removeStoreFromSubject;
    private __prepareEvent;
    private __triggerNativeEvent;
    get current(): string;
    currents: string[];
    on(events: CanArray<string>, callback: CallbackFunction, options?: IEventEmitterOnOptions): this;
    on(subjects: CanArray<HTMLElement | Window | object>, events: CanArray<string>, callback: CallbackFunction, options?: IEventEmitterOnOptions): this;
    one(eventsOrSubjects: CanArray<string> | CanArray<HTMLElement | Window | object>, callbackOrEvents: CallbackFunction | CanArray<string>, optionsOrCallback: IEventEmitterOnOptions | CallbackFunction | void, opts?: IEventEmitterOnOptions): this;
    off(events: CanArray<string>, callback?: CallbackFunction): this;
    off(subjects: CanArray<Window | HTMLElement | object>, events?: CanArray<string>, callback?: CallbackFunction): this;
    stopPropagation(events: string): void;
    stopPropagation(subject: object, eventsList: string): void;
    private __stopped;
    private __removeStop;
    private __isStopped;
    fire(subjectOrEvents: string, ...args: any[]): any;
    fire(subjectOrEvents: object, eventsList: string | Event, ...args: any[]): any;
    private __isDestructed;
    constructor(doc?: Document);
    destruct(): void;
}
