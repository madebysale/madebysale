/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { ComponentStatus, IAsync, IComponent, IDictionary, Nullable } from 'jodit/types';
export declare abstract class Component implements IComponent {
    static STATUSES: {
        readonly beforeInit: "beforeInit";
        readonly ready: "ready";
        readonly beforeDestruct: "beforeDestruct";
        readonly destructed: "destructed";
    };
    private __componentName;
    readonly async: IAsync;
    get componentName(): string;
    readonly uid: string;
    getFullElName(elementName: string): string;
    getFullElName(elementName: string, mod: string): string;
    getFullElName(elementName: string, mod: string, modValue: boolean | string): string;
    get ownerDocument(): Document;
    get od(): Document;
    ownerWindow: Window;
    get ow(): Window;
    get<T>(chain: string, obj?: IDictionary): Nullable<T>;
    get isReady(): boolean;
    get isDestructed(): boolean;
    get isInDestruct(): boolean;
    bindDestruct(component: IComponent): this;
    abstract className(): string;
    protected constructor();
    destruct(): void;
    private __componentStatus;
    get componentStatus(): ComponentStatus;
    set componentStatus(componentStatus: ComponentStatus);
    setStatus(componentStatus: ComponentStatus): void;
    private setStatusComponent;
    hookStatus(status: ComponentStatus, callback: (component: this) => void): void;
    static isInstanceOf<T extends IComponent>(c: unknown | IComponent, constructorFunc: Function): c is T;
}
