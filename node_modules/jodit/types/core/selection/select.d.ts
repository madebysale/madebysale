/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { CanUndef, HTMLTagNames, IDictionary, IJodit, ISelect, IStyle, MarkerInfo, Nullable } from 'jodit/types';
export declare class Select implements ISelect {
    readonly jodit: IJodit;
    constructor(jodit: IJodit);
    private get j();
    private errorNode;
    private get area();
    private get win();
    private get doc();
    get sel(): ISelect['sel'];
    get range(): Range;
    get isInsideArea(): boolean;
    createRange(select?: boolean): Range;
    remove(): void;
    clear(): void;
    removeNode(node: Node): void;
    insertCursorAtPoint(x: number, y: number): boolean;
    static isMarker(elm: Nullable<Node>): elm is HTMLElement;
    get hasMarkers(): boolean;
    get markers(): HTMLElement[];
    removeMarkers(): void;
    marker(atStart?: boolean, range?: Range): HTMLSpanElement;
    restore(): void;
    save(silent?: boolean): MarkerInfo[];
    focus(options?: FocusOptions): boolean;
    isCollapsed(): boolean;
    isFocused(): boolean;
    current(checkChild?: boolean): null | Node;
    insertNode(node: Node, insertCursorAfter?: boolean, fireChange?: boolean): void;
    insertHTML(html: number | string | Node, insertCursorAfter?: boolean): void;
    insertImage(url: string | HTMLImageElement, styles?: Nullable<IDictionary<string>>, defaultWidth?: Nullable<number | string>): void;
    eachSelection(callback: (current: Node) => void): void;
    cursorInTheEdge(start: boolean, parentBlock: HTMLElement): Nullable<boolean>;
    cursorOnTheLeft(parentBlock: HTMLElement): Nullable<boolean>;
    cursorOnTheRight(parentBlock: HTMLElement): Nullable<boolean>;
    setCursorAfter(node: Node): Nullable<Text>;
    setCursorBefore(node: Node): Nullable<Text>;
    private setCursorNearWith;
    setCursorIn(node: Node, inStart?: boolean): Node;
    selectRange(range: Range, focus?: boolean): this;
    select(node: Node | HTMLElement | HTMLTableElement | HTMLTableCellElement, inward?: boolean): this;
    get html(): string;
    wrapInTagGen(): Generator<HTMLElement>;
    wrapInTag(tagOrCallback: HTMLTagNames | ((font: HTMLElement) => any)): HTMLElement[];
    applyStyle(style: CanUndef<IStyle>, options?: {
        element?: HTMLTagNames;
        className?: string;
        defaultTag?: HTMLTagNames;
    }): void;
    splitSelection(currentBox: HTMLElement): Nullable<Element>;
    expandSelection(): this;
}
