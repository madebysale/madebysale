/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { IFileBrowserAnswer, IFileBrowserOptions, IViewBased, IPermissions, IFileBrowserDataProvider, ImageBox, Nullable, IFileBrowserDataProviderItemsMods, IFileBrowserItem, ISourcesFiles } from 'jodit/types';
export declare const DEFAULT_SOURCE_NAME = "default";
export default class DataProvider implements IFileBrowserDataProvider {
    readonly parent: IViewBased;
    readonly options: IFileBrowserOptions;
    private __currentPermissions;
    constructor(parent: IViewBased, options: IFileBrowserOptions);
    get o(): this['options'];
    private ajaxInstances;
    protected get<T extends IFileBrowserAnswer = IFileBrowserAnswer>(name: keyof IFileBrowserOptions): Promise<T>;
    private progressHandler;
    onProgress(callback: (percentage: number) => void): void;
    permissions(path: string, source: string): Promise<Nullable<IPermissions>>;
    canI(action: string): boolean;
    items(path: string, source: string, mods?: IFileBrowserDataProviderItemsMods): Promise<IFileBrowserItem[]>;
    private generateItemsList;
    tree(path: string, source: string): Promise<ISourcesFiles>;
    getPathByUrl(url: string): Promise<any>;
    createFolder(name: string, path: string, source: string): Promise<boolean>;
    move(filepath: string, path: string, source: string, isFile: boolean): Promise<boolean>;
    private remove;
    fileRemove(path: string, file: string, source: string): Promise<string>;
    folderRemove(path: string, file: string, source: string): Promise<string>;
    private rename;
    folderRename(path: string, name: string, newname: string, source: string): Promise<string>;
    fileRename(path: string, name: string, newname: string, source: string): Promise<string>;
    private changeImage;
    crop(path: string, source: string, name: string, newname: string | void, box: ImageBox | void): Promise<boolean>;
    resize(path: string, source: string, name: string, newname: string | void, box: ImageBox | void): Promise<boolean>;
    getMessage(resp: IFileBrowserAnswer): string;
    isSuccess(resp: IFileBrowserAnswer): boolean;
    destruct(): any;
}
