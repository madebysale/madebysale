/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import './button.less';
import type { IControlTypeStrong, IToolbarButton, IToolbarCollection, IViewBased, Nullable } from 'jodit/types';
import { UIButton } from 'jodit/core/ui/button';
export declare class ToolbarButton<T extends IViewBased = IViewBased> extends UIButton implements IToolbarButton {
    readonly control: IControlTypeStrong;
    readonly target: Nullable<HTMLElement>;
    className(): string;
    readonly state: {
        theme: string;
        currentValue: string;
        hasTrigger: boolean;
        size: "tiny" | "xsmall" | "small" | "middle" | "large";
        name: string;
        value: string | number | boolean;
        variant: import("jodit/types").ButtonVariant;
        type: "button" | "submit";
        disabled: boolean;
        activated: boolean;
        icon: import("jodit/types").IUIIconState;
        text: string;
        tooltip: string;
        tabIndex: import("jodit/types").CanUndef<number>;
    };
    protected trigger: HTMLElement;
    protected get toolbar(): Nullable<IToolbarCollection>;
    get button(): HTMLElement;
    update(): void;
    private calculateActivatedStatus;
    private calculateDisabledStatus;
    protected onChangeActivated(): void;
    protected onChangeText(): void;
    protected onChangeTabIndex(): void;
    protected onChangeTooltip(): void;
    protected createContainer(): HTMLElement;
    focus(): void;
    protected onChangeHasTrigger(): void;
    protected onChangeDisabled(): void;
    protected initTooltip(): void;
    constructor(jodit: T, control: IControlTypeStrong, target?: Nullable<HTMLElement>);
    private initFromControl;
    protected onTriggerClick(e: MouseEvent): void;
    private openedPopup;
    private openControlList;
    protected onOutsideClick(e: MouseEvent): void;
    private openPopup;
    private closePopup;
    protected onClick(originalEvent: MouseEvent): void;
    destruct(): any;
}
