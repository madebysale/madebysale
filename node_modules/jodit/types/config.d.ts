/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { IExtraPlugin, IDictionary, IViewOptions, NodeFunction, Attributes, ButtonsOption, Controls, IControlType, IUIButtonState, InsertMode, Nullable } from './types';
export declare class Config implements IViewOptions {
    defaultTimeout: number;
    namespace: string;
    safeMode: boolean;
    width: number | string;
    height: number | string;
    safePluginsList: string[];
    commandToHotkeys: IDictionary<string | string[]>;
    license: string;
    preset: string;
    presets: IDictionary;
    ownerDocument: Document;
    ownerWindow: Window;
    shadowRoot: Nullable<ShadowRoot>;
    styleValues: IDictionary;
    zIndex: number;
    readonly: boolean;
    disabled: boolean;
    activeButtonsInReadOnly: string[];
    allowCommandsInReadOnly: string[];
    toolbarButtonSize: IUIButtonState['size'];
    allowTabNavigation: boolean;
    inline: boolean;
    theme: string;
    saveModeInStorage: boolean;
    editorCssClass: false | string;
    style: false | IDictionary;
    triggerChangeEvent: boolean;
    direction: 'rtl' | 'ltr' | '';
    language: string;
    debugLanguage: boolean;
    i18n: IDictionary<IDictionary<string>> | false;
    tabIndex: number;
    toolbar: boolean | string | HTMLElement;
    statusbar: boolean;
    showTooltip: boolean;
    showTooltipDelay: number;
    useNativeTooltip: boolean;
    defaultActionOnPaste: InsertMode;
    enter: 'p' | 'div' | 'br';
    iframe: boolean;
    editHTMLDocumentMode: boolean;
    enterBlock: 'p' | 'div';
    defaultMode: number;
    useSplitMode: boolean;
    colors: IDictionary<string[]> | string[];
    colorPickerDefaultTab: 'background' | 'color';
    imageDefaultWidth: number;
    removeButtons: string[];
    disablePlugins: string[] | string;
    extraPlugins: Array<string | IExtraPlugin>;
    basePath?: string;
    extraButtons: Array<string | IControlType>;
    extraIcons: IDictionary<string>;
    createAttributes: IDictionary<Attributes | NodeFunction>;
    sizeLG: number;
    sizeMD: number;
    sizeSM: number;
    buttons: ButtonsOption;
    buttonsMD: ButtonsOption;
    buttonsSM: ButtonsOption;
    buttonsXS: ButtonsOption;
    controls: Controls;
    events: IDictionary<(...args: any[]) => any>;
    textIcons: boolean;
    showBrowserColorPicker: boolean;
    private static __defaultOptions;
    static get defaultOptions(): Config;
}
