/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
import type { CustomCommand, IDictionary, IPluginSystem, IStatusBar, IWorkPlace, Modes, IFileBrowser, IJodit, IUploader, ICreate, IStorage, CanPromise, IHistory } from './types';
import type * as Modules from './modules/';
import { Config } from './config';
import * as constants from './core/constants';
import { Select, ViewWithToolbar } from './modules/';
import { Dlgs } from 'jodit/core/traits';
export interface Jodit extends Dlgs {
}
export declare class Jodit extends ViewWithToolbar implements IJodit, Dlgs {
    className(): string;
    waitForReady(): Promise<IJodit>;
    static get ready(): Promise<IJodit>;
    readonly isJodit: true;
    get text(): string;
    get defaultTimeout(): number;
    static atom<T>(object: T): T;
    static make(element: HTMLElement | string, options?: object): Jodit;
    static isJoditAssigned(element: HTMLElement): element is HTMLElement & {
        component: Jodit;
    };
    static get defaultOptions(): Config;
    static fatMode: boolean;
    static readonly plugins: IPluginSystem;
    static modules: typeof Modules;
    static ns: typeof Modules;
    static readonly decorators: IDictionary<Function>;
    static readonly constants: typeof constants;
    static readonly instances: IDictionary<IJodit>;
    static readonly lang: any;
    static readonly core: {
        Plugin: typeof Modules.Plugin;
    };
    private readonly commands;
    private __selectionLocked;
    private __wasReadOnly;
    readonly storage: IStorage;
    readonly createInside: ICreate;
    editorIsActive: boolean;
    private setPlaceField;
    get element(): HTMLElement;
    get editor(): HTMLDivElement | HTMLBodyElement;
    set editor(editor: HTMLDivElement | HTMLBodyElement);
    get container(): HTMLDivElement;
    set container(container: HTMLDivElement);
    get workplace(): HTMLDivElement;
    get statusbar(): IStatusBar;
    get iframe(): HTMLIFrameElement | void;
    set iframe(iframe: HTMLIFrameElement | void);
    get history(): IHistory;
    get observer(): IHistory;
    get editorWindow(): Window;
    set editorWindow(win: Window);
    get ew(): this['editorWindow'];
    get editorDocument(): Document;
    get ed(): this['editorDocument'];
    get options(): Config;
    set options(opt: Config);
    readonly selection: Select;
    get s(): this['selection'];
    get uploader(): IUploader;
    get filebrowser(): IFileBrowser;
    private __mode;
    get mode(): Modes;
    set mode(mode: Modes);
    getNativeEditorValue(): string;
    setNativeEditorValue(value: string): void;
    get value(): string;
    set value(html: string);
    synchronizeValues(): void;
    __imdSynchronizeValues(): void;
    getEditorValue(removeSelectionMarkers?: boolean, consumer?: string): string;
    private __callChangeCount;
    setEditorValue(value?: string): void;
    protected updateElementValue(): void;
    getElementValue(): string;
    protected setElementValue(value?: string): CanPromise<void>;
    private __setElementValue;
    registerCommand(commandNameOriginal: string, command: CustomCommand<IJodit>, options?: {
        stopPropagation: boolean;
    }): IJodit;
    registerHotkeyToCommand(hotkeys: string | string[], commandName: string, shouldStop?: boolean): void;
    execCommand(command: string, showUI?: boolean, value?: null | any): void;
    private isSilentChange;
    nativeExecCommand(command: string, showUI?: boolean, value?: null | any): boolean;
    private execCustomCommands;
    lock(name?: string): boolean;
    unlock(): boolean;
    getMode(): Modes;
    isEditorMode(): boolean;
    getRealMode(): Modes;
    setMode(mode: number | string): void;
    toggleMode(): void;
    setDisabled(isDisabled: boolean): void;
    getDisabled(): boolean;
    setReadOnly(isReadOnly: boolean): void;
    getReadOnly(): boolean;
    beforeInitHook(): CanPromise<void>;
    afterInitHook(): void;
    protected initOptions(options?: object): void;
    protected initOwners(): void;
    constructor(element: HTMLElement | string, options?: object);
    currentPlace: IWorkPlace;
    places: IWorkPlace[];
    private readonly elementToPlace;
    addPlace(source: HTMLElement | string, options?: object): void | Promise<any>;
    protected addDisclaimer(elm: HTMLElement): void;
    setCurrentPlace(place: IWorkPlace): void;
    private initEditor;
    private createEditor;
    private prepareWYSIWYGEditor;
    destruct(): void;
}
