{"ast":null,"code":"// import React, { useRef, useState, useEffect } from 'react';\n// import { filter } from 'lodash';\n// import { Icon } from '@iconify/react';\n// import { sentenceCase } from 'change-case';\n// import plusFill from '@iconify/icons-eva/plus-fill';\n// import { Link as RouterLink } from 'react-router-dom';\n// // material\n// import {\n//   Card,\n//   Table,\n//   Avatar,\n//   Button,\n//   Checkbox,\n//   TableRow,\n//   TableBody,\n//   TableCell,\n//   Container,\n//   Typography,\n//   TableContainer,\n//   TablePagination,\n// } from '@material-ui/core';\n// import Stack from '@mui/material/Stack';\n// // components\n// // import Page from '../components/Page';\n// // import Label from './Label';\n// // import Scrollbar from './Scrollbar';\n// import USERLIST from './User';\n// import SearchNotFound from './SearchNotFound';\n// import UserListHead from './UserListHead';\n// import UserListToolbar from './UserListToolbar';\n// import UserMoreMenu from './UserMoreMenu';\n// //\n// // ----------------------------------------------------------------------\n// const TABLE_HEAD = [\n//   { id: 'image', label: 'Image', alignRight: false },\n//   { id: 'Catgory code', label: 'Catgory code', alignRight: false },\n//   { id: 'Catgory Name', label: 'Catgory Name', alignRight: false },\n//   { id: 'Slug', label: 'Slug', alignRight: false },\n//   { id: 'Parent Category', label: 'Parent Category', alignRight: false },\n//   { id: 'Action', label: 'Action', alignRight: false },\n// ];\n// // ----------------------------------------------------------------------\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function getComparator(order, orderBy) {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// function applySortFilter(array, comparator, query) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   if (query) {\n//     return filter(array, (_user) => _user.name.toLowerCase().indexOf(query.toLowerCase()) !== -1);\n//   }\n//   return stabilizedThis.map((el) => el[0]);\n// }\n// function ListCategories(props) {\n//   // console.log(props.props.productlist);\n//   const [data, setdata] = useState([]);\n//   const [posts, setPosts] = useState([]);\n//   useEffect(() => {\n//     // const response = axios.post('http://192.168.29.199:3000/api/public/Liststockproduct');\n//     // console.log(response);\n//     // setPosts(response);\n//     const requestOptions = {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//     };\n//     fetch('http://143.205.125.69:3000/api/public/Liststockproduct', requestOptions)\n//       .then((response) => response.json())\n//       .then((data) => setdata(data.data.ListstockproductResponce));\n//   }, []);\n//   //\n//   const [page, setPage] = useState(0);\n//   const [order, setOrder] = useState('asc');\n//   const [selected, setSelected] = useState([]);\n//   const [orderBy, setOrderBy] = useState('name');\n//   const [filterName, setFilterName] = useState('');\n//   const [rowsPerPage, setRowsPerPage] = useState(5);\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === 'asc';\n//     setOrder(isAsc ? 'desc' : 'asc');\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelecteds = data.map((n) => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1)\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   const handleFilterByName = (event) => {\n//     setFilterName(event.target.value);\n//   };\n//   const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;\n//   const filteredUsers = applySortFilter(data, getComparator(order, orderBy), filterName);\n//   const isUserNotFound = filteredUsers.length === 0;\n//   return (\n//     // <Page title=\"User | Minimal-UI\">\n//     <Container>\n//       {/* <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\n//           <Typography variant=\"h4\" gutterBottom>\n//             User\n//           </Typography>\n//           <Button\n//             variant=\"contained\"\n//             component={RouterLink}\n//             to=\"#\"\n//             startIcon={<Icon icon={plusFill} />}\n//           >\n//             New User\n//           </Button>\n//         </Stack> */}\n//       <UserListToolbar\n//         numSelected={selected.length}\n//         filterName={filterName}\n//         onFilterName={handleFilterByName}\n//       />\n//       {/* <Scrollbar> */}\n//         <TableContainer>\n//           <Table>\n//             <UserListHead\n//               order={order}\n//               orderBy={orderBy}\n//               headLabel={TABLE_HEAD}\n//               rowCount={data.length}\n//               numSelected={selected.length}\n//               onRequestSort={handleRequestSort}\n//               onSelectAllClick={handleSelectAllClick}\n//             />\n//             <TableBody>\n//               {filteredUsers\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row) => {\n//                   const {\n//                     id,\n//                     name,\n//                     unit,\n//                     cost,\n//                     price,\n//                     image,\n//                     code,\n//                     brand,\n//                     quantity,\n//                     alert_quantity,\n//                     category_id,\n//                     isVerified,\n//                   } = row;\n//                   const isItemSelected = selected.indexOf(name) !== -1;\n//                   return (\n//                     <TableRow\n//                     // hover\n//                     // key={id}\n//                     // tabIndex={-1}\n//                     // role=\"checkbox\"\n//                     // selected={isItemSelected}\n//                     // aria-checked={isItemSelected}\n//                     >\n//                       {/* <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={isItemSelected}\n//                           onChange={(event) => handleClick(event, name)}\n//                         />\n//                       </TableCell> */}\n//                       {/* <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n//                           <Avatar alt={name} src={image} />\n//                           <Typography variant=\"subtitle2\" noWrap>\n//                             {name}\n//                           </Typography>\n//                         </Stack>\n//                       </TableCell> */}\n//                       <TableCell align=\"left\">{image}</TableCell>\n//                       <TableCell align=\"left\">{code}</TableCell>\n//                       <TableCell align=\"left\">{name}</TableCell>\n//                       <TableCell align=\"left\">{brand}</TableCell>\n//                       <TableCell align=\"left\">{category_id}</TableCell>\n//                       <TableCell align=\"left\">{cost}</TableCell>\n//                       <TableCell align=\"left\">{price}</TableCell>\n//                       <TableCell align=\"left\">{quantity}</TableCell>\n//                       <TableCell align=\"left\">{unit}</TableCell>\n//                       <TableCell align=\"left\">{alert_quantity}</TableCell>\n//                       {/* <TableCell align=\"left\">{Actions}</TableCell> */}\n//                       {/* <TableCell align=\"left\">{unit}</TableCell>\n//                       <TableCell align=\"left\">{price}</TableCell>\n//                       <TableCell align=\"left\">{cost}</TableCell>\n//                       <TableCell align=\"left\">{isVerified ? 'Yes' : 'No'}</TableCell> */}\n//                       {/* <TableCell align=\"left\">\n//                         <Label\n//                           variant=\"ghost\"\n//                           color={(status === 'banned' && 'error') || 'success'}\n//                         >\n//                           {sentenceCase(status)}\n//                         </Label>\n//                       </TableCell> */}\n//                       <TableCell align=\"right\">\n//                         <UserMoreMenu />\n//                       </TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 53 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//             {isUserNotFound && (\n//               <TableBody>\n//                 <TableRow>\n//                   <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n//                     <SearchNotFound searchQuery={filterName} />\n//                   </TableCell>\n//                 </TableRow>\n//               </TableBody>\n//             )}\n//           </Table>\n//         </TableContainer>\n//       {/* </Scrollbar> */}\n//       <TablePagination\n//         rowsPerPageOptions={[5, 10, 25]}\n//         component=\"div\"\n//         count={data.length}\n//         rowsPerPage={rowsPerPage}\n//         page={page}\n//         onPageChange={handleChangePage}\n//         onRowsPerPageChange={handleChangeRowsPerPage}\n//       />\n//     </Container>\n//     // </Page>\n//   );\n// }\n// export default ListCategories;","map":{"version":3,"names":[],"sources":["/home/iss/Downloads/POS_ADMIN_2/POS_ADMIN1/src/app/views/Settings/ListCategories.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from 'react';\n// import { filter } from 'lodash';\n// import { Icon } from '@iconify/react';\n// import { sentenceCase } from 'change-case';\n// import plusFill from '@iconify/icons-eva/plus-fill';\n// import { Link as RouterLink } from 'react-router-dom';\n// // material\n// import {\n//   Card,\n//   Table,\n//   Avatar,\n//   Button,\n//   Checkbox,\n//   TableRow,\n//   TableBody,\n//   TableCell,\n//   Container,\n//   Typography,\n//   TableContainer,\n//   TablePagination,\n// } from '@material-ui/core';\n// import Stack from '@mui/material/Stack';\n// // components\n// // import Page from '../components/Page';\n// // import Label from './Label';\n// // import Scrollbar from './Scrollbar';\n// import USERLIST from './User';\n// import SearchNotFound from './SearchNotFound';\n// import UserListHead from './UserListHead';\n// import UserListToolbar from './UserListToolbar';\n// import UserMoreMenu from './UserMoreMenu';\n// //\n\n// // ----------------------------------------------------------------------\n\n// const TABLE_HEAD = [\n//   { id: 'image', label: 'Image', alignRight: false },\n//   { id: 'Catgory code', label: 'Catgory code', alignRight: false },\n//   { id: 'Catgory Name', label: 'Catgory Name', alignRight: false },\n//   { id: 'Slug', label: 'Slug', alignRight: false },\n//   { id: 'Parent Category', label: 'Parent Category', alignRight: false },\n//   { id: 'Action', label: 'Action', alignRight: false },\n  \n// ];\n\n// // ----------------------------------------------------------------------\n\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function getComparator(order, orderBy) {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// function applySortFilter(array, comparator, query) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   if (query) {\n//     return filter(array, (_user) => _user.name.toLowerCase().indexOf(query.toLowerCase()) !== -1);\n//   }\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\n// function ListCategories(props) {\n//   // console.log(props.props.productlist);\n//   const [data, setdata] = useState([]);\n//   const [posts, setPosts] = useState([]);\n//   useEffect(() => {\n//     // const response = axios.post('http://192.168.29.199:3000/api/public/Liststockproduct');\n//     // console.log(response);\n//     // setPosts(response);\n//     const requestOptions = {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//     };\n//     fetch('http://143.205.125.69:3000/api/public/Liststockproduct', requestOptions)\n//       .then((response) => response.json())\n//       .then((data) => setdata(data.data.ListstockproductResponce));\n//   }, []);\n//   //\n//   const [page, setPage] = useState(0);\n//   const [order, setOrder] = useState('asc');\n//   const [selected, setSelected] = useState([]);\n//   const [orderBy, setOrderBy] = useState('name');\n//   const [filterName, setFilterName] = useState('');\n//   const [rowsPerPage, setRowsPerPage] = useState(5);\n\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === 'asc';\n//     setOrder(isAsc ? 'desc' : 'asc');\n//     setOrderBy(property);\n//   };\n\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelecteds = data.map((n) => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1)\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n\n//   const handleFilterByName = (event) => {\n//     setFilterName(event.target.value);\n//   };\n\n//   const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;\n\n//   const filteredUsers = applySortFilter(data, getComparator(order, orderBy), filterName);\n\n//   const isUserNotFound = filteredUsers.length === 0;\n\n//   return (\n//     // <Page title=\"User | Minimal-UI\">\n//     <Container>\n//       {/* <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\n//           <Typography variant=\"h4\" gutterBottom>\n//             User\n//           </Typography>\n//           <Button\n//             variant=\"contained\"\n//             component={RouterLink}\n//             to=\"#\"\n//             startIcon={<Icon icon={plusFill} />}\n//           >\n//             New User\n//           </Button>\n//         </Stack> */}\n\n//       <UserListToolbar\n//         numSelected={selected.length}\n//         filterName={filterName}\n//         onFilterName={handleFilterByName}\n//       />\n\n//       {/* <Scrollbar> */}\n//         <TableContainer>\n//           <Table>\n//             <UserListHead\n//               order={order}\n//               orderBy={orderBy}\n//               headLabel={TABLE_HEAD}\n//               rowCount={data.length}\n//               numSelected={selected.length}\n//               onRequestSort={handleRequestSort}\n//               onSelectAllClick={handleSelectAllClick}\n//             />\n//             <TableBody>\n//               {filteredUsers\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row) => {\n//                   const {\n//                     id,\n//                     name,\n//                     unit,\n//                     cost,\n//                     price,\n//                     image,\n//                     code,\n//                     brand,\n//                     quantity,\n//                     alert_quantity,\n//                     category_id,\n//                     isVerified,\n//                   } = row;\n//                   const isItemSelected = selected.indexOf(name) !== -1;\n\n//                   return (\n//                     <TableRow\n//                     // hover\n//                     // key={id}\n//                     // tabIndex={-1}\n//                     // role=\"checkbox\"\n//                     // selected={isItemSelected}\n//                     // aria-checked={isItemSelected}\n//                     >\n//                       {/* <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={isItemSelected}\n//                           onChange={(event) => handleClick(event, name)}\n//                         />\n//                       </TableCell> */}\n//                       {/* <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n//                           <Avatar alt={name} src={image} />\n//                           <Typography variant=\"subtitle2\" noWrap>\n//                             {name}\n//                           </Typography>\n//                         </Stack>\n//                       </TableCell> */}\n//                       <TableCell align=\"left\">{image}</TableCell>\n//                       <TableCell align=\"left\">{code}</TableCell>\n//                       <TableCell align=\"left\">{name}</TableCell>\n//                       <TableCell align=\"left\">{brand}</TableCell>\n//                       <TableCell align=\"left\">{category_id}</TableCell>\n//                       <TableCell align=\"left\">{cost}</TableCell>\n//                       <TableCell align=\"left\">{price}</TableCell>\n//                       <TableCell align=\"left\">{quantity}</TableCell>\n//                       <TableCell align=\"left\">{unit}</TableCell>\n//                       <TableCell align=\"left\">{alert_quantity}</TableCell>\n//                       {/* <TableCell align=\"left\">{Actions}</TableCell> */}\n\n//                       {/* <TableCell align=\"left\">{unit}</TableCell>\n//                       <TableCell align=\"left\">{price}</TableCell>\n//                       <TableCell align=\"left\">{cost}</TableCell>\n//                       <TableCell align=\"left\">{isVerified ? 'Yes' : 'No'}</TableCell> */}\n\n//                       {/* <TableCell align=\"left\">\n//                         <Label\n//                           variant=\"ghost\"\n//                           color={(status === 'banned' && 'error') || 'success'}\n//                         >\n//                           {sentenceCase(status)}\n//                         </Label>\n//                       </TableCell> */}\n\n//                       <TableCell align=\"right\">\n//                         <UserMoreMenu />\n//                       </TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 53 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//             {isUserNotFound && (\n//               <TableBody>\n//                 <TableRow>\n//                   <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n//                     <SearchNotFound searchQuery={filterName} />\n//                   </TableCell>\n//                 </TableRow>\n//               </TableBody>\n//             )}\n//           </Table>\n//         </TableContainer>\n//       {/* </Scrollbar> */}\n\n//       <TablePagination\n//         rowsPerPageOptions={[5, 10, 25]}\n//         component=\"div\"\n//         count={data.length}\n//         rowsPerPage={rowsPerPage}\n//         page={page}\n//         onPageChange={handleChangePage}\n//         onRowsPerPageChange={handleChangeRowsPerPage}\n//       />\n//     </Container>\n//     // </Page>\n//   );\n// }\n// export default ListCategories;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}