"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

require("./yearPickerStyle.css");

var _calendarIcon = _interopRequireDefault(require("./assets/calendar-icon.svg"));

var _calendarIconActive = _interopRequireDefault(require("./assets/calendar-icon-active.svg"));

var _back = _interopRequireDefault(require("./assets/back.svg"));

var _rightArrow = _interopRequireDefault(require("./assets/right-arrow.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getYearsArrayFromRange = function getYearsArrayFromRange(startYear, endYear) {
  var yearTabs = [];

  for (var i = endYear; i >= startYear; i--) {
    yearTabs.push(i);
  }

  return JSON.parse(JSON.stringify(yearTabs));
};

var YearPicker = /*#__PURE__*/function (_React$Component) {
  _inherits(YearPicker, _React$Component);

  function YearPicker(props) {
    var _this;

    _classCallCheck(this, YearPicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(YearPicker).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "getYearsArray", function (originalArray, initailIndex, lastIndex) {
      var newArray = originalArray;
      newArray = newArray.slice(initailIndex, lastIndex);
      return newArray;
    });

    _defineProperty(_assertThisInitialized(_this), "handlePicker", function () {
      _this.setState({
        showPicker: !_this.state.showPicker
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getYearsList", function () {
      var _this$state = _this.state,
          selectedValue = _this$state.selectedValue,
          selectedArray = _this$state.selectedArray;
      var onSelect = _this.props.onSelect;
      return selectedArray.map(function (obj, index) {
        return _react.default.createElement("span", {
          key: index,
          onClick: function onClick() {
            return onSelect ? onSelect(obj) : alert(obj);
          },
          style: {
            backgroundColor: selectedValue === obj ? '#db0040' : '',
            color: selectedValue === obj ? '#fff !importt' : 'rgb(16, 23, 44)'
          }
        }, _react.default.createElement("span", {
          className: "StyledYear"
        }, obj), (index + 1) % 4 === 0 && _react.default.createElement("br", null));
      });
    });

    _defineProperty(_assertThisInitialized(_this), "incrementValue", function () {
      var _this$state2 = _this.state,
          selectedIndexArray = _this$state2.selectedIndexArray,
          originalArray = _this$state2.originalArray;

      if (selectedIndexArray + 12 <= originalArray.length - 1) {
        var newArray = _this.getYearsArray(originalArray, selectedIndexArray + 12, selectedIndexArray + 12 * 2);

        _this.setState({
          selectedArray: newArray,
          selectedIndexArray: selectedIndexArray + 12
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "decrementValue", function () {
      var _this$state3 = _this.state,
          selectedIndexArray = _this$state3.selectedIndexArray,
          originalArray = _this$state3.originalArray;

      if (selectedIndexArray - 12 >= 0) {
        var newArray = _this.getYearsArray(originalArray, selectedIndexArray - 12, selectedIndexArray);

        _this.setState({
          selectedArray: newArray,
          selectedIndexArray: selectedIndexArray - 12
        });
      }
    });

    var _this$props = _this.props,
        minRange = _this$props.minRange,
        maxRange = _this$props.maxRange,
        _this$props$yearArray = _this$props.yearArray,
        yearArray = _this$props$yearArray === void 0 ? [] : _this$props$yearArray;

    if (yearArray && yearArray.length === 0) {
      yearArray = JSON.parse(JSON.stringify(getYearsArrayFromRange(1800, new Date().getFullYear)));
    }

    if (minRange && maxRange) {
      yearArray = getYearsArrayFromRange(minRange, maxRange);
    }

    _this.state = {
      showPicker: false,
      selectedValue: _this.props.value,
      selectedIndexArray: 0,
      selectedArray: _this.getYearsArray(yearArray, 0, 12),
      originalArray: yearArray
    };
    return _this;
  }

  _createClass(YearPicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state4 = this.state,
          showPicker = _this$state4.showPicker,
          selectedArray = _this$state4.selectedArray,
          originalArray = _this$state4.originalArray,
          selectedValue = _this$state4.selectedValue;
      var _this$props2 = this.props,
          leftIcon = _this$props2.leftIcon,
          rightIcon = _this$props2.rightIcon,
          icon = _this$props2.icon,
          activeIcon = _this$props2.activeIcon,
          hideInput = _this$props2.hideInput;
      return _react.default.createElement("div", {
        className: "year-div"
      }, !hideInput && _react.default.createElement("input", {
        type: "text",
        value: selectedValue,
        readOnly: true
      }), _react.default.createElement("img", {
        className: "img-style",
        onClick: this.handlePicker,
        src: showPicker ? icon ? icon : _calendarIconActive.default : activeIcon ? activeIcon : _calendarIcon.default,
        alt: "calender-icon"
      }), showPicker && _react.default.createElement("div", {
        className: "Header"
      }, _react.default.createElement("div", {
        className: "StyledHeader"
      }, _react.default.createElement("div", {
        className: "StyledContainer"
      }, _react.default.createElement("span", {
        className: "clickable ".concat(this.state.selectedIndexArray - 12 >= 0 ? '' : 'disabled'),
        onClick: this.decrementValue
      }, _react.default.createElement("img", {
        src: leftIcon ? leftIcon : _back.default,
        className: "wd-15",
        alt: "left-icon"
      })), _react.default.createElement("span", null, selectedArray[0], "-", selectedArray[selectedArray.length - 1]), _react.default.createElement("span", {
        className: "clickable ".concat(this.state.selectedIndexArray + 12 <= originalArray.length - 1 ? '' : 'disabled'),
        onClick: this.incrementValue
      }, _react.default.createElement("img", {
        src: rightIcon ? rightIcon : _rightArrow.default,
        className: "wd-15",
        alt: "right-icon"
      }))), _react.default.createElement("div", {
        className: "StyledCalendarBody"
      }, this.getYearsList())), _react.default.createElement("div", {
        className: "BackDrop",
        onClick: function onClick() {
          return _this2.handlePicker();
        }
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var _nextProps$yearArray = nextProps.yearArray,
          yearArray = _nextProps$yearArray === void 0 ? [] : _nextProps$yearArray,
          minRange = nextProps.minRange,
          maxRange = nextProps.maxRange,
          value = nextProps.value;
      var originalArray = prevState.originalArray,
          selectedValue = prevState.selectedValue;

      if (yearArray && yearArray.length === 0) {
        yearArray = getYearsArrayFromRange(1800, new Date().getFullYear());
      }

      if (minRange && maxRange) {
        yearArray = getYearsArrayFromRange(minRange, maxRange);
      }

      if (JSON.stringify(yearArray) === JSON.stringify(originalArray) && value !== selectedValue) {
        return {
          showPicker: false,
          selectedValue: value
        };
      }

      if (JSON.stringify(yearArray) !== JSON.stringify(originalArray)) {
        var newArray = Array.from(yearArray);
        newArray = newArray.slice(0, 12);
        return {
          originalArray: yearArray,
          selectedArray: newArray,
          selectedIndexArray: 0,
          showPicker: false,
          selectedValue: value
        };
      }

      return null;
    }
  }]);

  return YearPicker;
}(_react.default.Component);

var _default = YearPicker;
exports.default = _default;